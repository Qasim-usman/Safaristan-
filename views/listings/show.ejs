<% layout('layouts/bioler') %>

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card shadow-lg border-0">

        <!-- Image Carousel -->
        <div id="listingCarousel" class="carousel slide" data-bs-ride="carousel">
          <div class="carousel-indicators">
            <% let imageCount = 0; %>
            <% if (listing.image?.url) { %>
              <button type="button" data-bs-target="#listingCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
              <% imageCount++; %>
            <% } %>
            <% if (listing.image2?.url) { %>
              <button type="button" data-bs-target="#listingCarousel" data-bs-slide-to="<%= imageCount %>" aria-label="Slide <%= imageCount + 1 %>"></button>
              <% imageCount++; %>
            <% } %>
            <% if (listing.image3?.url) { %>
              <button type="button" data-bs-target="#listingCarousel" data-bs-slide-to="<%= imageCount %>" aria-label="Slide <%= imageCount + 1 %>"></button>
            <% } %>
          </div>

          <div class="carousel-inner">
            <% if (listing.image?.url) { %>
              <div class="carousel-item active">
                <img src="<%= listing.image.url %>" class="d-block w-100 img-fluid rounded-top" alt="Image 1" style="max-height: 400px; object-fit: cover;" />
                <div class="carousel-caption d-none d-md-block">
                  <b>Image uploaded by <%= listing.owner.username %></b>
                </div>
              </div>
            <% } %>
            <% if (listing.image2?.url) { %>
              <div class="carousel-item">
                <img src="<%= listing.image2.url %>" class="d-block w-100 img-fluid rounded-top" alt="Image 2" style="max-height: 400px; object-fit: cover;" />
                <div class="carousel-caption d-none d-md-block">
                  <b>Image uploaded by <%= listing.owner.username %></b>
                </div>
              </div>
            <% } %>
            <% if (listing.image3?.url) { %>
              <div class="carousel-item">
                <img src="<%= listing.image3.url %>" class="d-block w-100 img-fluid rounded-top" alt="Image 3" style="max-height: 400px; object-fit: cover;" />
                <div class="carousel-caption d-none d-md-block">
                  <b>Image uploaded by <%= listing.owner.username %></b>
                </div>
              </div>
            <% } %>
          </div>

          <button class="carousel-control-prev" type="button" data-bs-target="#listingCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
          </button>
          <button class="carousel-control-next" type="button" data-bs-target="#listingCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
          </button>
        </div>

        <!-- Listing Info -->
        <div class="card-body">
          <h2 class="card-title mb-4 text-center fw-bold"><%= listing.title %></h2>
          <ul class="list-group list-group-flush mb-4">
            <li class="list-group-item"><strong>Owned by:</strong> <%= listing.owner.username %></li>
            <li class="list-group-item"><strong>Description:</strong> <%= listing.description %></li>
            <li class="list-group-item"><strong>Price:</strong> &#8360; <%= (listing.price || 0).toLocaleString("en-PK") %></li>
            <li class="list-group-item"><strong>Location:</strong> <%= listing.location %></li>
            <li class="list-group-item"><strong>Country:</strong> <%= listing.country %></li>
          </ul>

          <% if (userCurr && userCurr._id.toString() === listing.owner._id.toString()) { %>
            <div class="d-flex justify-content-between">
              <a href="/listings/<%= listing._id %>/edit" class="btn btn-warning">Edit Listing</a>
              <form action="/listings/<%= listing._id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this listing?');">
                <button type="submit" class="btn btn-danger">Delete Listing</button>
              </form>
            </div>
          <% } %>

          <hr>

         <!-- Map Controls -->
<div class="map-controls mb-3">
    <div class="btn-group" role="group" aria-label="Map type">
        <button type="button" class="btn btn-outline-primary btn-sm active" onclick="switchMapType('standard')">
            <i class="fas fa-map"></i> Standard
        </button>
        <button type="button" class="btn btn-outline-primary btn-sm" onclick="switchMapType('satellite')">
            <i class="fas fa-satellite"></i> Satellite
        </button>
        <button type="button" class="btn btn-outline-primary btn-sm" onclick="switchMapType('terrain')">
            <i class="fas fa-mountain"></i> Terrain
        </button>
        <button type="button" class="btn btn-outline-primary btn-sm" onclick="switchMapType('dark')">
            <i class="fas fa-moon"></i> Dark
        </button>
        <button type="button" class="btn btn-outline-primary btn-sm" onclick="switchMapType('streets')">
            <i class="fas fa-road"></i> Streets
        </button>
    </div>
    
    <!-- Additional Controls -->
    <div class="btn-group ms-2" role="group">
        <button type="button" class="btn btn-outline-success btn-sm" onclick="toggleFullscreen()">
            <i class="fas fa-expand" id="fullscreen-icon"></i>
        </button>
        <button type="button" class="btn btn-outline-info btn-sm" onclick="centerOnUser()">
            <i class="fas fa-crosshairs"></i> My Location
        </button>
        <button type="button" class="btn btn-outline-warning btn-sm" onclick="centerOnListing()">
            <i class="fas fa-home"></i> Listing
        </button>
    </div>
</div>

<!-- Map Container -->
<div id="map" class="map-container"></div>
          <!-- Review Form -->
          
            <div class="mt-4">
              <h3>Leave a review</h3>
              <form action="/listings/<%= listing._id %>/reviews" method="POST" class="needs-validation" novalidate>
                <div class="mt-3">
                  <label class="form-label">Rating</label>
                  <fieldset class="starability-slot">
                    <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked />
                    <input type="radio" id="first-rate1" name="review[rating]" value="1" /><label for="first-rate1" title="Terrible">1 star</label>
                    <input type="radio" id="first-rate2" name="review[rating]" value="2" /><label for="first-rate2" title="Not good">2 stars</label>
                    <input type="radio" id="first-rate3" name="review[rating]" value="3" /><label for="first-rate3" title="Average">3 stars</label>
                    <input type="radio" id="first-rate4" name="review[rating]" value="4" /><label for="first-rate4" title="Very good">4 stars</label>
                    <input type="radio" id="first-rate5" name="review[rating]" value="5" /><label for="first-rate5" title="Amazing">5 stars</label>
                  </fieldset>
                </div>

                <div class="mt-3">
                  <label for="comment" class="form-label">Comments</label>
                  <textarea name="review[comment]" id="comment" cols="30" rows="5" class="form-control" required></textarea>
                  <div class="invalid-feedback">Please enter a valid comment.</div>
                </div>

                <button type="submit" class="btn btn-outline-dark mt-3">Submit</button>
              </form>
              <hr>
            </div>
        

          <!-- Show Reviews -->
          <div class="row mt-4">
            <% for (let review of listing.review) { %>
              <div class="col-md-6 col-lg-5 mb-4">
                <div class="card shadow-sm border-0 rounded-3 h-100">
                  <div class="card-body">
                    <h5 class="card-title fw-bold">
                      <% if (review.author) { %>
                        <%= review.author.username %>
                      <% } else { %>
                        <em>Author not found</em>
                      <% } %>
                    </h5>
                    <p class="card-text text-muted mb-1"><%= review.comment %></p>
                    <p class="card-text text-warning fw-semibold">‚≠ê <%= review.rating %>/5</p>

                    <% if (userCurr && userCurr._id.toString() === review.author._id.toString()) { %>
                      <form action="/listings/<%= listing._id %>/reviews/<%= review._id %>?_method=DELETE" method="POST">
                        <button class="btn btn-sm btn-danger mt-2" onclick="return confirm('Delete this review?')">Delete</button>
                      </form>
                    <% } %>
                  </div>
                </div>
              </div>
            <% } %>
          </div>

        </div>
      </div>
    </div>
  </div>

<script>
// Pass server data to client-side JavaScript
window.listingData = {
    coordinates: {
        lat: <%= listing.coordinates ? listing.coordinates.lat : 'null' %>,
        lng: <%= listing.coordinates ? listing.coordinates.lng : 'null' %>
    },
    title: '<%= listing.title %>',
    location: '<%= listing.location %>',
    price: '<%= listing.price %>'
};

// Initialize map after page loads
document.addEventListener('DOMContentLoaded', function() {
    if (window.listingData.coordinates.lat && window.listingData.coordinates.lng) {
        initializeMap();
    } else {
        document.getElementById('map').innerHTML = 
            '<div class="text-center p-4"><i class="fas fa-map-marker-alt"></i><br>Location coordinates not available</div>';
    }
});

// Distance calculation function
function calculateDistance(lat1, lng1, lat2, lng2) {
    const R = 6371; // Earth's radius in kilometers
    
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    
    const a = 
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLng / 2) * Math.sin(dLng / 2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;
    
    return Math.round(distance * 100) / 100;
}

// Main map initialization function
function initializeMap() {
    const coords = window.listingData.coordinates;
    
    if (!coords.lat || !coords.lng) {
        document.getElementById('map').innerHTML = 
            '<div class="text-center p-4">Location coordinates not available</div>';
        return;
    }
    
    // Create map centered on listing
    const map = L.map('map').setView([coords.lat, coords.lng], 12);
    
    // Add tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);
    
    // Listing marker (RED)
    const listingIcon = L.divIcon({
        html: '<div class="custom-marker" style="background-color: #FF5A5F; color: white; border-radius: 50%; width: 35px; height: 35px; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 10px rgba(0,0,0,0.3); border: 2px solid white;"><i class="fas fa-home"></i></div>',
        iconSize: [35, 35],
        iconAnchor: [17, 17],
        className: 'custom-div-icon'
    });
    
    L.marker([coords.lat, coords.lng], { icon: listingIcon })
        .addTo(map)
        .bindPopup(`
            <div style="text-align: center;">
                <h6>${window.listingData.title}</h6>
                <p><strong>${window.listingData.location}</strong></p>
                <p style="color: #FF5A5F; font-weight: bold;">‚Çπ${window.listingData.price}/night</p>
            </div>
        `)
        .openPopup();
    
    // Get user location and calculate distance
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const userLat = position.coords.latitude;
                const userLng = position.coords.longitude;
                
                // Calculate distance
                const distance = calculateDistance(
                    userLat, userLng,
                    coords.lat, coords.lng
                );
                
                // User marker (BLUE)
                const userIcon = L.divIcon({
                    html: '<div class="custom-marker" style="background-color: #007bff; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 10px rgba(0,0,0,0.3); border: 2px solid white;"><i class="fas fa-user"></i></div>',
                    iconSize: [30, 30],
                    iconAnchor: [15, 15],
                    className: 'custom-div-icon'
                });
                
                L.marker([userLat, userLng], { icon: userIcon })
                    .addTo(map)
                    .bindPopup(`
                        <div style="text-align: center;">
                            <strong>Your Location</strong><br>
                            <span style="color: #28a745; font-weight: bold;">
                                ${distance} km away from listing
                            </span>
                        </div>
                    `);
                
                // Distance line
                L.polyline([
                    [userLat, userLng],
                    [coords.lat, coords.lng]
                ], {
                    color: '#666',
                    weight: 3,
                    opacity: 0.7,
                    dashArray: '10, 10'
                }).addTo(map);
                
                // Distance label on line
                const midLat = (userLat + coords.lat) / 2;
                const midLng = (userLng + coords.lng) / 2;
                
                L.marker([midLat, midLng], {
                    icon: L.divIcon({
                        html: `<div style="background: white; padding: 5px 10px; border-radius: 15px; border: 2px solid #007bff; font-weight: bold; font-size: 12px; color: #007bff; box-shadow: 0 2px 8px rgba(0,0,0,0.2);">${distance} km</div>`,
                        iconSize: [60, 25],
                        iconAnchor: [30, 12],
                        className: 'distance-label'
                    })
                }).addTo(map);
                
                // Adjust map to show both markers
                const group = new L.featureGroup([
                    L.marker([coords.lat, coords.lng]),
                    L.marker([userLat, userLng])
                ]);
                map.fitBounds(group.getBounds().pad(0.1));
                
                // Update distance in UI
                updateDistanceInUI(distance);
                
            },
            function(error) {
                console.log("Location access denied");
                showLocationErrorMessage();
            }
        );
    } else {
        showLocationErrorMessage();
    }
}

// Update UI with distance info
function updateDistanceInUI(distance) {
    // Add distance to title
    const titleElement = document.querySelector('.card-title');
    if (titleElement && !titleElement.querySelector('.distance-badge')) {
        titleElement.innerHTML += `
            <span class="badge bg-success ms-2 distance-badge" style="font-size: 0.7em; animation: pulse 2s infinite;">
                ${distance} km away
            </span>
        `;
    }
    
    // Add distance to location info
    const locationItems = document.querySelectorAll('.list-group-item');
    locationItems.forEach(item => {
        if (item.innerHTML.includes('<strong>Location:</strong>') && !item.querySelector('.distance-info')) {
            item.innerHTML += `
                <br><small class="distance-info" style="color: #28a745; font-weight: bold;">
                    <i class="fas fa-route"></i> ${distance} km from your location
                </small>
            `;
        }
    });
}

// Show error message
function showLocationErrorMessage() {
    const mapContainer = document.getElementById('map');
    if (mapContainer && !mapContainer.querySelector('.location-error')) {
        mapContainer.innerHTML += `
            <div class="alert alert-info mt-2 location-error" style="position: absolute; top: 10px; left: 10px; right: 10px; z-index: 1000;">
                <i class="fas fa-info-circle"></i> 
                Allow location access to see distance from your location
            </div>
        `;
    }
}
// Global variables
let map;
let currentTileLayer;
let listingMarker;
let userMarker;
let distanceLine;
let distanceLabel;
let isFullscreen = false;

// Map tile providers
const mapTileProviders = {
    standard: {
        url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        attribution: '¬© OpenStreetMap contributors',
        name: 'Standard'
    },
    satellite: {
        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
        attribution: '¬© Esri, Maxar, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community',
        name: 'Satellite'
    },
    terrain: {
        url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
        attribution: '¬© OpenTopoMap (CC-BY-SA)',
        name: 'Terrain'
    },
    dark: {
        url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',
        attribution: '¬© CARTO, ¬© OpenStreetMap contributors',
        name: 'Dark'
    },
    streets: {
        url: 'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
        attribution: '¬© OpenStreetMap contributors, ¬© Humanitarian OpenStreetMap Team',
        name: 'Streets'
    }
};

// Switch map type function
function switchMapType(type) {
    if (!map || !mapTileProviders[type]) return;
    
    // Remove current tile layer
    if (currentTileLayer) {
        map.removeLayer(currentTileLayer);
    }
    
    // Add new tile layer
    currentTileLayer = L.tileLayer(mapTileProviders[type].url, {
        attribution: mapTileProviders[type].attribution,
        maxZoom: 18
    }).addTo(map);
    
    // Update active button
    document.querySelectorAll('.map-controls .btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // Show notification
    showMapNotification(`Switched to ${mapTileProviders[type].name} view`);
}

// Fullscreen toggle
function toggleFullscreen() {
    const mapContainer = document.getElementById('map');
    const icon = document.getElementById('fullscreen-icon');
    
    if (!isFullscreen) {
        // Enter fullscreen
        mapContainer.style.position = 'fixed';
        mapContainer.style.top = '0';
        mapContainer.style.left = '0';
        mapContainer.style.width = '100vw';
        mapContainer.style.height = '100vh';
        mapContainer.style.zIndex = '9999';
        mapContainer.style.backgroundColor = 'white';
        
        icon.className = 'fas fa-compress';
        isFullscreen = true;
        
        // Add exit button
        const exitBtn = document.createElement('button');
        exitBtn.id = 'exit-fullscreen';
        exitBtn.className = 'btn btn-danger';
        exitBtn.style.position = 'absolute';
        exitBtn.style.top = '10px';
        exitBtn.style.right = '10px';
        exitBtn.style.zIndex = '10000';
        exitBtn.innerHTML = '<i class="fas fa-times"></i> Exit Fullscreen';
        exitBtn.onclick = toggleFullscreen;
        mapContainer.appendChild(exitBtn);
        
    } else {
        // Exit fullscreen
        mapContainer.style.position = 'relative';
        mapContainer.style.top = 'auto';
        mapContainer.style.left = 'auto';
        mapContainer.style.width = '100%';
        mapContainer.style.height = '400px';
        mapContainer.style.zIndex = 'auto';
        
        icon.className = 'fas fa-expand';
        isFullscreen = false;
        
        // Remove exit button
        const exitBtn = document.getElementById('exit-fullscreen');
        if (exitBtn) exitBtn.remove();
    }
    
    // Refresh map size
    setTimeout(() => {
        if (map) map.invalidateSize();
    }, 100);
}

// Center on user location
function centerOnUser() {
    if (navigator.geolocation && map) {
        navigator.geolocation.getCurrentPosition(function(position) {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;
            
            map.setView([userLat, userLng], 15);
            showMapNotification('Centered on your location');
        }, function(error) {
            showMapNotification('Could not get your location', 'error');
        });
    }
}

// Center on listing
function centerOnListing() {
    const coords = window.listingData.coordinates;
    if (map && coords.lat && coords.lng) {
        map.setView([coords.lat, coords.lng], 15);
        showMapNotification('Centered on listing location');
    }
}

// Show notification
function showMapNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type === 'error' ? 'danger' : 'success'} map-notification`;
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.zIndex = '10001';
    notification.style.minWidth = '250px';
    notification.innerHTML = `
        <i class="fas fa-${type === 'error' ? 'exclamation-triangle' : 'check-circle'}"></i> 
        ${message}
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// Updated initializeMap function
function initializeMap() {
    const coords = window.listingData.coordinates;
    
    if (!coords.lat || !coords.lng) {
        document.getElementById('map').innerHTML = 
            '<div class="text-center p-4">Location coordinates not available</div>';
        return;
    }
    
    // Create map with standard view
    map = L.map('map').setView([coords.lat, coords.lng], 12);
    
    // Add default tile layer
    currentTileLayer = L.tileLayer(mapTileProviders.standard.url, {
        attribution: mapTileProviders.standard.attribution,
        maxZoom: 18
    }).addTo(map);
    
    // Create listing marker
    const listingIcon = L.divIcon({
        html: '<div class="custom-marker listing-marker"><i class="fas fa-home"></i></div>',
        iconSize: [35, 35],
        iconAnchor: [17, 17],
        className: 'custom-div-icon'
    });
    
    listingMarker = L.marker([coords.lat, coords.lng], { icon: listingIcon })
        .addTo(map)
        .bindPopup(`
            <div style="text-align: center;">
                <h6>${window.listingData.title}</h6>
                <p><strong>${window.listingData.location}</strong></p>
                <p style="color: #FF5A5F; font-weight: bold;">‚Çπ${window.listingData.price}/night</p>
            </div>
        `)
        .openPopup();
    
    // Get user location
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const userLat = position.coords.latitude;
                const userLng = position.coords.longitude;
                
                // Calculate distance
                const distance = calculateDistance(userLat, userLng, coords.lat, coords.lng);
                
                // Create user marker  
                const userIcon = L.divIcon({
                    html: '<div class="custom-marker user-marker"><i class="fas fa-user"></i></div>',
                    iconSize: [30, 30],
                    iconAnchor: [15, 15],
                    className: 'custom-div-icon'
                });
                
                userMarker = L.marker([userLat, userLng], { icon: userIcon })
                    .addTo(map)
                    .bindPopup(`
                        <div style="text-align: center;">
                            <strong>Your Location</strong><br>
                            <span style="color: #28a745; font-weight: bold;">
                                ${distance} km away from listing
                            </span>
                        </div>
                    `);
                
                // Add distance line
                distanceLine = L.polyline([
                    [userLat, userLng],
                    [coords.lat, coords.lng]
                ], {
                    color: '#666',
                    weight: 3,
                    opacity: 0.7,
                    dashArray: '10, 10'
                }).addTo(map);
                
                // Add distance label
                const midLat = (userLat + coords.lat) / 2;
                const midLng = (userLng + coords.lng) / 2;
                
                distanceLabel = L.marker([midLat, midLng], {
                    icon: L.divIcon({
                        html: `<div class="distance-badge">${distance} km</div>`,
                        iconSize: [60, 25],
                        iconAnchor: [30, 12],
                        className: 'distance-label'
                    })
                }).addTo(map);
                
                // Fit bounds to show both markers
                const group = new L.featureGroup([listingMarker, userMarker]);
                map.fitBounds(group.getBounds().pad(0.1));
                
                updateDistanceInUI(distance);
            },
            function(error) {
                showMapNotification('Location access denied', 'error');
            }
        );
    }
}
</script>
</div>
